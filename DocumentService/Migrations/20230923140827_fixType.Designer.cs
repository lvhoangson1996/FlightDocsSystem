// <auto-generated />
using System;
using DocumentService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DocumentService.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20230923140827_fixType")]
    partial class fixType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DocumentService.Model.Documents", b =>
                {
                    b.Property<string>("IdDocument")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdFlight")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameDoc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdDocument");

                    b.HasIndex("IdFlight");

                    b.HasIndex("IdType");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DocumentService.Model.Flight", b =>
                {
                    b.Property<string>("IdFlight")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AirplaneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PointOfLoading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PointOfUnloading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("StatusFlight")
                        .HasColumnType("bit");

                    b.HasKey("IdFlight");

                    b.ToTable("flights");
                });

            modelBuilder.Entity("DocumentService.Model.TypeDocument", b =>
                {
                    b.Property<string>("IdType")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdType");

                    b.ToTable("typeDocuments");
                });

            modelBuilder.Entity("DocumentService.Model.Documents", b =>
                {
                    b.HasOne("DocumentService.Model.Flight", "flight")
                        .WithMany("documents")
                        .HasForeignKey("IdFlight")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DocumentService.Model.TypeDocument", "typeDocument")
                        .WithMany("documents")
                        .HasForeignKey("IdType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("flight");

                    b.Navigation("typeDocument");
                });

            modelBuilder.Entity("DocumentService.Model.Flight", b =>
                {
                    b.Navigation("documents");
                });

            modelBuilder.Entity("DocumentService.Model.TypeDocument", b =>
                {
                    b.Navigation("documents");
                });
#pragma warning restore 612, 618
        }
    }
}
